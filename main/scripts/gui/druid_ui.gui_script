local druid = require("druid.druid")
local my_style = require("main.scripts.util.druid_style")

function load_game(self, collection_name, button)
	print("Start of game")
	msg.post("proxies:/contoller#proxy_contoller", "show_proxy", { name = collection_name })
end

local function load_buttons(self)
	self.druid:new_button("top_bar", function (self)
		switch_appearence(self, self.dark_mode)
	end)

	self.druid:new_button("button", load_game, "tic_tac_toe")
	self.druid:new_button("button1", load_game, "siedler_von_catan")
end


function init(self)
	-- Initialize DRUID
	self.druid = druid.new(self, my_style)

	-- Setup up color theme
	self.dark_mode = true
	
	self.light_button_col = vmath.vector4(norm_rgb(54), norm_rgb(104), norm_rgb(164), 1)
	self.dark_button_col = vmath.vector4(norm_rgb(44), norm_rgb(86), norm_rgb(135), 1)

	self.total_scroll_window_top = 0
	self.total_scroll_window_bottom = 0
	
	load_buttons(self)

	local back_handler = self.druid:new_back_handler(function (self)
        msg.post("@system:", "exit", { code = 0 })
	end)
	
	-- Turn on dark mode initially
	
	switch_appearence(self, false)

	-- Set up scrolling

	self.scroll_component = self.druid:new_scroll("scroll_view", "scroll_content")
		:set_extra_stretch_size(100)
		:set_inert(true)
		:set_horizontal_scroll(false)
		
		-- self.scroll_component:set_size(vmath.vector3(0,  self.total_scroll_window_top , 0), vmath.vector3(0,  self.total_scroll_window_bottom , 0)) 
end	

function final(self)
	self.druid:final()
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end


function switch_appearence(self, dark_mode)
	local bg_node = gui.get_node("scroll_view")

	if dark_mode then
		-- Set mode to light if dark mode is enabled
		gui.play_flipbook(bg_node, "Background Light")
		for button in pairs(gui.get_tree(gui.get_node("scroll_content"))) do
			if gui.get_color(gui.get_node(button)) == vmath.vector4(1) and gui.get_type(gui.get_node(button)) == gui.TYPE_BOX then
				gui.play_flipbook(gui.get_node(button), "Button Light")
				--gui.set_color(gui.get_node(button), self.light_button_col)
			end
		end

		gui.set_color(gui.get_node("top_bar"), self.light_button_col)

		self.dark_mode = false
	else
		-- Set mode to dark mode if light mode is enabled
		
		gui.play_flipbook(bg_node, "Background Dark")
		for button in pairs(gui.get_tree(gui.get_node("scroll_content"))) do
			if gui.get_color(gui.get_node(button)) == vmath.vector4(1) and gui.get_type(gui.get_node(button)) == gui.TYPE_BOX then
				gui.play_flipbook(gui.get_node(button), "Button Dark")
				--gui.set_color(gui.get_node(button), self.dark_button_col)
			end
		end

		gui.set_color(gui.get_node("top_bar"), self.dark_button_col)

		self.dark_mode = true
	end
end

function norm_rgb(r)
	return r / 255
end

function cmp_draw_order(a, b)
	local a_lst = { }
	local b_lst = { }
	local nd = a

	while nd ~= nil do
		a_lst[#a_lst] = gui.get_index(nd)
		nd = gui.get_parent(nd)
	end

	nd = b
	while nd ~= nil do
		b_lst[#b_lst] = gui.get_index(nd)
		nd = gui.get_parent(nd)
	end

	for i = 0, #a_lst do
		local aind = a_lst[#a_lst - i]
		local bind = b_lst[#b_lst - i]
		if aind ~= bind then
			return not bind or (aind and aind > bind)
		end
	end

	return false -- We should never get here.
end