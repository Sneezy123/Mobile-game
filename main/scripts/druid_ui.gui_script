local druid = require("druid.druid")



function init(self)
	self.druid = druid.new(self)
	self.druid:new_button("top_bar", switch_appearence)

	self.light_button_col = vmath.vector4(norm_rgb(54), norm_rgb(104), norm_rgb(164), 1)
	self.dark_button_col = vmath.vector4(norm_rgb(44), norm_rgb(86), norm_rgb(135), 1)


	self.dark_mode = true
	gui.play_flipbook(gui.get_node("bg"), "Background Dark")

	for button in pairs(gui.get_tree(gui.get_node("root"))) do
		if gui.get_visible(gui.get_node(button)) and gui.get_type(gui.get_node(button)) == gui.TYPE_BOX then
			-- gui.play_flipbook(gui.get_node(button), "Button Dark")
			gui.set_color(gui.get_node(button), self.dark_button_col)
		end
	end

	gui.set_color(gui.get_node("top_bar"), self.dark_button_col)
	
end

function final(self)
	self.druid:final()
end

function update(self, dt)
	self.druid:update(dt)
end

function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end

function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end


function switch_appearence(self)
	local bg_node = gui.get_node("bg")

	if self.dark_mode then
		gui.play_flipbook(bg_node, "Background Light")
		for button in pairs(gui.get_tree(gui.get_node("root"))) do
			if gui.get_visible(gui.get_node(button)) and gui.get_type(gui.get_node(button)) == gui.TYPE_BOX then
				--gui.play_flipbook(gui.get_node(button), "Button Light")
				gui.set_color(gui.get_node(button), self.light_button_col)
			end
		end

		gui.set_color(gui.get_node("top_bar"), self.light_button_col)

		self.dark_mode = false
	else
		gui.play_flipbook(bg_node, "Background Dark")
		for button in pairs(gui.get_tree(gui.get_node("root"))) do
			if gui.get_visible(gui.get_node(button)) and gui.get_type(gui.get_node(button)) == gui.TYPE_BOX then
				--gui.play_flipbook(gui.get_node(button), "Button Dark")
				gui.set_color(gui.get_node(button), self.dark_button_col)
			end
		end

		gui.set_color(gui.get_node("top_bar"), self.dark_button_col)

		self.dark_mode = true
	end
end

function norm_rgb(r)
	return r / 255
end